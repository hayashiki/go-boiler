name: Deploy to Cloud Run with Input

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "GitHub sha or latest"
        required: true

env:
  GCP_PROJECT: ${{secrets.GCP_PROJECT}}
  GCP_PROJECT_NUM: ${{secrets.GCP_PROJECT_NUM}}
  SERVICE_NAME: go-boiler-api
  REGION: asia-northeast1
jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ env.GCP_PROJECT }}

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0.7.0
        with:
          create_credentials_file: true
          workload_identity_provider: projects/${{ env.GCP_PROJECT_NUM }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions
          service_account: github-actions@${{ env.GCP_PROJECT }}.iam.gserviceaccount.com

      - id: gcloud
        name: Configure GCR Docker auth
        run: |-
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud --quiet auth configure-docker

      # TODO: Refine https://github.com/SBiliarski/TADevOpsFinalProject/blob/6f10acdccd4ee9b65e1c2e99fb36a9b84566666c/.github/workflows/ghactions.yml
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Set tfvars
        working-directory: ./terraform
        run: |
          tag=$(echo "${{ github.event.inputs.tag }}" | sed "s/^v//")
          if [ -z "$tag" ]; then
          exit 1
          fi
          echo "image_tag = \"$tag\"" >> terraform.tfvars

      - name: Terraform init
        id: init
        run: |-
          terraform init
        continue-on-error: false
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

      - name: Terraform format
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./terraform
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan -no-color \
          -out=PLAN
        #            \-var="project=${{ env.GCP_PROJECT }}" \
        #           -var="env=prod" \
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}

      - name: Terraform Apply
        id: apply
        run: |-
          terraform apply PLAN
        working-directory: ./terraform
        env:
          GOOGLE_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
